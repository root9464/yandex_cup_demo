pub fn search_crash_commit(tokens: Vec<&str>) -> String {
    // Проверяем, что входные данные не пусты
    if tokens.is_empty() {
        return "Входные данные пусты!".to_string();
    }

    // Остальные токены — это ответы системы тестирования (1 или 0)
    let responses: &[&str] = &tokens[1..];

    // Вектор для хранения последовательности выводов
    let mut outputs: Vec<String> = Vec::new();

    // Линейный поиск первого не проходящего коммита
    for (i, &resp) in responses.iter().enumerate() {
        let m = i + 1; // Номер текущего коммита (1-индексация)
        outputs.push(m.to_string()); // Добавляем номер коммита в вывод

        if resp == "0" {
            // Если коммит не проходит, добавляем "!m" и завершаем поиск
            outputs.push(format!("!{}", m));
            break;
        }
    }

    // Проверяем, был ли найден не проходящий коммит
    if !outputs.is_empty() {
        // Если последний элемент не начинается с '!', добавляем "!m"
        if !outputs.last().unwrap().starts_with('!') {
            // Это может произойти, если все коммиты проходят тесты
            // В условии задачи гарантируется, что такой коммит существует, поэтому этот случай не должен возникнуть
        }
    }

    // Выводим все запросы и результат в одной строке, разделенные пробелами

    return outputs.join(" ");
}
